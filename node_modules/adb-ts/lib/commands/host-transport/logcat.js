"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const linetransform_1 = __importDefault(require("../../linetransform"));
const logcat_1 = require("../../logcat");
const transport_1 = __importDefault(require("../abstract/transport"));
class LogcatCommand extends transport_1.default {
    constructor(connection, serial, options) {
        super(connection, serial);
        this.Cmd = 'shell:echo && ';
        this.keepAlive = true;
        this.options = options;
        let cmd = 'logcat -B *:I 2>/dev/null';
        if (options?.clear) {
            cmd = 'logcat -c 2>/dev/null && ' + cmd;
        }
        this.Cmd = `shell:echo && ${cmd}`;
    }
    async postExecute() {
        const stream = new linetransform_1.default({ autoDetect: true });
        this.connection.pipe(stream);
        await (0, util_1.promisify)((cb) => stream.once('readable', cb))();
        const logCat = (0, logcat_1.readStream)(stream, {
            filter: this.options?.filter
        });
        this.connection.on('error', (err) => logCat.emit('error', err));
        logCat.on('end', () => this.endConnection());
        return logCat;
    }
}
exports.default = LogcatCommand;
