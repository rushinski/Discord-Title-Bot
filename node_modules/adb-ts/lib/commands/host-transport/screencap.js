"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../util");
const linetransform_1 = __importDefault(require("../../linetransform"));
const transport_1 = __importDefault(require("../abstract/transport"));
class ScreencapCommand extends transport_1.default {
    constructor() {
        super(...arguments);
        this.keepAlive = false;
        this.Cmd = 'shell:echo && screencap -p 2>/dev/null';
    }
    async postExecute() {
        const buffer = await this.parser.readBytes(1);
        const transform = new linetransform_1.default({
            autoDetect: true
        });
        transform.write(buffer);
        this.connection.pipe(transform);
        return new Promise((resolve, reject) => {
            const acc = [];
            transform.on('data', (data) => {
                acc.push(Buffer.from(data));
            });
            transform.once('end', () => {
                resolve(Buffer.concat(acc));
            });
            transform.once('error', reject);
        });
    }
    async execute() {
        try {
            return await super.execute();
        }
        catch (err) {
            if (err instanceof util_1.PrematureEOFError) {
                throw new Error('No support for the screencap command');
            }
            throw err;
        }
        finally {
            this.endConnection();
        }
    }
}
exports.default = ScreencapCommand;
