"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../util");
const transport_1 = __importDefault(require("./transport"));
class StartProcess extends transport_1.default {
    constructor(connection, serial, command, pkg, process, options = {}) {
        super(connection, serial);
        this.keepAlive = false;
        this.Cmd = [
            command,
            ...this.intentArgs(options),
            '-n',
            (0, util_1.escape)(`${pkg}/.${process}`),
            '--user',
            (0, util_1.escape)(options.user || 0)
        ].join(' ');
    }
    async postExecute() {
        try {
            const [, errMsg] = await this.parser.searchLine(/^Error: (.*)$/);
            throw new Error(errMsg);
        }
        catch (err) {
            if (!(err instanceof util_1.PrematureEOFError)) {
                throw err;
            }
        }
        finally {
            await this.parser.end();
        }
    }
    formatExtraType(type) {
        switch (type) {
            case 'string':
                return 's';
            case 'null':
                return 'sn';
            case 'bool':
                return 'z';
            case 'int':
                return 'i';
            case 'long':
                return 'l';
            case 'float':
                return 'f';
            case 'uri':
                return 'u';
            case 'component':
                return 'cn';
            default:
                throw new util_1.UnexpectedDataError(type, 'AdbExtraType');
        }
    }
    formatExtraObject(extra) {
        const type = this.formatExtraType(extra.type);
        if (extra.type === 'null') {
            return ['--e' + type, (0, util_1.escape)(extra.key)];
        }
        if (Array.isArray(extra.value)) {
            return [
                '--e' + type + 'a',
                (0, util_1.escape)(extra.key),
                extra.value.map(util_1.escape).join(',')
            ];
        }
        return ['--e' + type, (0, util_1.escape)(extra.key), (0, util_1.escape)(extra.value)];
    }
    formatExtras(extras = []) {
        return [extras]
            .flat()
            .map((ext) => this.formatExtraObject(ext))
            .flat();
    }
    keyToFlag(k) {
        switch (k) {
            case 'action':
                return '-a';
            case 'data':
                return '-d';
            case 'mimeType':
                return '-t';
            case 'category':
                return '-c';
            case 'flags':
                return '-f';
            default:
                throw new util_1.UnexpectedDataError(String(k), 'keyof Options');
        }
    }
    intentArgs(options) {
        return Object.entries(options).reduce((args, [k, v]) => {
            if (typeof v === 'undefined') {
                return [...args];
            }
            switch (k) {
                case 'extras':
                    return [...args, ...this.formatExtras(options.extras)];
                case 'action':
                case 'data':
                case 'mimeType':
                case 'flags':
                    return [...args, this.keyToFlag(k), (0, util_1.escape)(options[k])];
                case 'category':
                    return [
                        ...args,
                        ...[options.category]
                            .flat()
                            .map((cat) => [this.keyToFlag(k), (0, util_1.escape)(cat)].join(' '))
                    ];
                default:
                    return [...args];
            }
        }, []);
    }
}
exports.default = StartProcess;
