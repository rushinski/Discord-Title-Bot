"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructDevice = void 0;
const net_1 = __importDefault(require("net"));
const util_1 = require("../../util");
const command_1 = __importDefault(require("../command"));
const expectedKeys = [
    'usb',
    'product',
    'model',
    'device',
    'transport_id'
];
const throwUnexpected = (received) => {
    throw new util_1.UnexpectedDataError(received, `<id> <state> <${expectedKeys.join('|')}>:<value>`);
};
const parseProps = (values) => {
    return values.reduce((acc, curr) => {
        const match = curr.match(new RegExp(`(${expectedKeys.join('|')}):(\\S+)(?=\\s|$)`));
        if (!match) {
            return acc;
        }
        const [key, value] = match.slice(1);
        acc[key] = value;
        return acc;
    }, {});
};
function constructDevice(line) {
    const values = line.split(/\s+/);
    const [id, state] = values;
    if (!id || !state) {
        return throwUnexpected(line);
    }
    const { usb, product, model, device, transport_id } = parseProps(values.slice(2));
    if (typeof transport_id === 'undefined')
        return throwUnexpected(line);
    return {
        id: id,
        state: /emulator/.test(id) && state === 'device'
            ? 'emulator'
            : state,
        path: usb,
        product: product,
        model: model,
        device: device,
        transportId: transport_id,
        transport: net_1.default.isIPv4(/^(.*?):([0-9]+)$/.exec(id)?.[1] || '')
            ? 'local'
            : 'usb'
    };
}
exports.constructDevice = constructDevice;
class DevicesCommand extends command_1.default {
    constructor(connection, command) {
        super(connection);
        this.command = command;
    }
    parse(value) {
        return value.split('\n').filter(Boolean).map(constructDevice);
    }
    async readDevices() {
        const value = (await this.parser.readValue()).toString().trim();
        return this.parse(value);
    }
    async execute() {
        try {
            await this.initAndValidateReply(this.command);
            return this.readOnExecute ? await this.readDevices() : [];
        }
        catch (err) {
            this.endConnection();
            throw err;
        }
    }
}
exports.default = DevicesCommand;
