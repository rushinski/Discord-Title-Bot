/// <reference types="node" />
import { EventEmitter } from 'events';
import { IDevice } from './util';
import { Client } from './client';
import TrackCommand from './commands/host/trackdevices';
import { Device } from './device';
export declare class Tracker extends EventEmitter {
    /** @ignore */
    private readonly command;
    private ended;
    private deviceMap;
    private readonly client;
    /** @ignore */
    constructor(command: TrackCommand, client: Client);
    get Devices(): Device[];
    private hook;
    private read;
    private update;
    end(): void;
    on(event: 'add' | 'change', listener: (device: Device) => void): this;
    on(event: 'remove', listener: (device: IDevice) => void): this;
    on(event: 'end', listener: () => void): this;
    on(event: 'error', listener: (err: Error) => void): this;
}
