/// <reference types="node" />
/// <reference types="node" />
import { TransportCommandConstruct, CpOptions, DeviceState, ForwardsObject, IDevice, InputSource, InstallOptions, LogcatOptions, MkDirOptions, MvOptions, ReversesObject, RmOptions, SettingsMode, PrimitiveType, StartActivityOptions, StartServiceOptions, TouchOptions, TransportType, UninstallOptions, PropertyMap, PropertyValue, KeyEventOptions, InputDurationOptions, NonEmptyArray } from './util';
import { Client } from './client';
import { Connection } from './connection';
import { FileStat } from './filestats';
import { KeyCode } from './util/keycode';
import { LogcatReader } from './logcat/reader';
import { Monkey } from './monkey/client';
import { PullTransfer } from './sync/pulltransfer';
import { PushTransfer } from './sync/pushtransfer';
import { Readable } from 'stream';
import SyncEntry from './sync/entry';
import { SyncMode } from './sync';
export declare class Device implements IDevice {
    readonly id: string;
    readonly state: DeviceState;
    readonly path: string | undefined;
    readonly device: string | undefined;
    readonly model: string | undefined;
    readonly product: string | undefined;
    readonly transportId: string;
    readonly transport: TransportType;
    private readonly client;
    constructor(client: Client, props: IDevice);
    getSerialNo(): Promise<string>;
    getDevicePath(): Promise<string>;
    listProperties(): Promise<PropertyMap>;
    listFeatures(): Promise<PropertyMap>;
    listPackages(): Promise<string[]>;
    getIpAddress(): Promise<string[]>;
    forward(local: string, remote: string): Promise<void>;
    listForwards(): Promise<ForwardsObject[]>;
    reverse(local: string, remote: string): Promise<void>;
    listReverses(): Promise<ReversesObject[]>;
    shell(command: string): Promise<string>;
    reboot(): Promise<void>;
    shutdown(): Promise<void>;
    remount(): Promise<void>;
    root(): Promise<void>;
    screenshot(): Promise<Buffer>;
    openTcp(port: number, host?: string): Promise<Connection>;
    openLogcat(options?: LogcatOptions): Promise<LogcatReader>;
    clear(pkg: string): Promise<void>;
    install(apk: string | Readable): Promise<void>;
    install(apk: string | Readable, options?: InstallOptions): Promise<void>;
    install(apk: string | Readable, options?: InstallOptions, args?: string): Promise<void>;
    uninstall(pkg: string, options?: UninstallOptions): Promise<void>;
    isInstalled(pkg: string): Promise<boolean>;
    startActivity(pkg: string, activity: string, options?: StartActivityOptions): Promise<void>;
    startService(pkg: string, service: string, options?: StartServiceOptions): Promise<void>;
    readDir(path: string): Promise<SyncEntry[]>;
    pushDataToFile(data: string | Buffer | Readable, destPath: string): Promise<void>;
    pushFile(srcPath: string, destPath: string): Promise<void>;
    pullDataFromFile(srcPath: string): Promise<Buffer>;
    pullFile(srcPath: string, destPath: string): Promise<void>;
    pull(path: string): Promise<PullTransfer>;
    push(srcPath: string | Readable, destPath: string, mode?: SyncMode): Promise<PushTransfer>;
    tcpip(port?: number): Promise<void>;
    usb(): Promise<void>;
    waitBootComplete(): Promise<void>;
    listSettings(mode: SettingsMode): Promise<PropertyMap>;
    getProp(prop: string): Promise<PropertyValue>;
    setProp(prop: string, value: PrimitiveType): Promise<void>;
    getSetting(mode: SettingsMode, name: string): Promise<PropertyValue>;
    putSetting(mode: SettingsMode, name: string, value: PrimitiveType): Promise<void>;
    tap(x: number, y: number, source?: InputSource): Promise<void>;
    text(text: string, source?: InputSource): Promise<void>;
    keyEvent(code: KeyCode | number | NonEmptyArray<number | KeyCode>, options?: KeyEventOptions): Promise<void>;
    swipe(x1: number, y1: number, x2: number, y2: number, options?: InputDurationOptions): Promise<void>;
    dragAndDrop(x1: number, y1: number, x2: number, y2: number, options?: InputDurationOptions): Promise<void>;
    press(source?: InputSource): Promise<void>;
    roll(x: number, y: number, source?: InputSource): Promise<void>;
    custom<T, P extends unknown[] = unknown[]>(CustomCommand: TransportCommandConstruct<T, P>, ...args: P): Promise<T>;
    openMonkey(): Promise<Monkey>;
    killApp(pkg: string): Promise<void>;
    /**
     * If cmd contains arguments, they need to be passed as and string[], not string. @see https://github.com/Maaaartin/adb-ts/issues/13
     */
    exec(cmd: string | string[]): Promise<string>;
    execShell(cmd: string | string[]): Promise<string>;
    batteryStatus(): Promise<PropertyMap>;
    rm(path: string, options?: RmOptions): Promise<void>;
    mkdir(path: string, options?: MkDirOptions): Promise<void>;
    touch(path: string, options?: TouchOptions): Promise<void>;
    mv(srcPath: string, destPath: string, options?: MvOptions): Promise<void>;
    cp(srcPath: string, destPath: string, options?: CpOptions): Promise<void>;
    fileStat(path: string): Promise<FileStat>;
}
