"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = void 0;
class Device {
    constructor(client, props) {
        this.client = client;
        this.id = props.id;
        this.state = props.state;
        this.path = props.path;
        this.device = props.device;
        this.model = props.model;
        this.product = props.product;
        this.transportId = props.transportId;
        this.transport = props.transport;
    }
    getSerialNo() {
        return this.client.getSerialNo(this.id);
    }
    getDevicePath() {
        return this.client.getDevicePath(this.id);
    }
    listProperties() {
        return this.client.listProperties(this.id);
    }
    listFeatures() {
        return this.client.listFeatures(this.id);
    }
    listPackages() {
        return this.client.listPackages(this.id);
    }
    getIpAddress() {
        return this.client.getIpAddress(this.id);
    }
    forward(local, remote) {
        return this.client.forward(this.id, local, remote);
    }
    listForwards() {
        return this.client.listForwards(this.id);
    }
    reverse(local, remote) {
        return this.client.reverse(this.id, local, remote);
    }
    listReverses() {
        return this.client.listReverses(this.id);
    }
    shell(command) {
        return this.client.shell(this.id, command);
    }
    reboot() {
        return this.client.reboot(this.id);
    }
    shutdown() {
        return this.client.shutdown(this.id);
    }
    remount() {
        return this.client.remount(this.id);
    }
    root() {
        return this.client.root(this.id);
    }
    screenshot() {
        return this.client.screenshot(this.id);
    }
    openTcp(port, host) {
        return this.client.openTcp(this.id, port, host);
    }
    openLogcat(options) {
        return this.client.openLogcat(this.id, options);
    }
    clear(pkg) {
        return this.client.clear(this.id, pkg);
    }
    install(apk, options, args) {
        return this.client.install(this.id, apk, options, args);
    }
    uninstall(pkg, options) {
        return this.client.uninstall(this.id, pkg, options);
    }
    isInstalled(pkg) {
        return this.client.isInstalled(this.id, pkg);
    }
    startActivity(pkg, activity, options) {
        return this.client.startActivity(this.id, pkg, activity, options);
    }
    startService(pkg, service, options) {
        return this.client.startService(this.id, pkg, service, options);
    }
    readDir(path) {
        return this.client.readDir(this.id, path);
    }
    pushDataToFile(data, destPath) {
        return this.client.pushDataToFile(this.id, data, destPath);
    }
    pushFile(srcPath, destPath) {
        return this.client.pushFile(this.id, srcPath, destPath);
    }
    pullDataFromFile(srcPath) {
        return this.client.pullDataFromFile(this.id, srcPath);
    }
    pullFile(srcPath, destPath) {
        return this.client.pullFile(this.id, srcPath, destPath);
    }
    pull(path) {
        return this.client.pull(this.id, path);
    }
    push(srcPath, destPath, mode) {
        return this.client.push(this.id, srcPath, destPath, mode);
    }
    tcpip(port = 5555) {
        return this.client.tcpip(this.id, port);
    }
    usb() {
        return this.client.usb(this.id);
    }
    waitBootComplete() {
        return this.client.waitBootComplete(this.id);
    }
    listSettings(mode) {
        return this.client.listSettings(this.id, mode);
    }
    getProp(prop) {
        return this.client.getProp(this.id, prop);
    }
    setProp(prop, value) {
        return this.client.setProp(this.id, prop, value);
    }
    getSetting(mode, name) {
        return this.client.getSetting(this.id, mode, name);
    }
    putSetting(mode, name, value) {
        return this.client.putSetting(this.id, mode, name, value);
    }
    tap(x, y, source) {
        return this.client.tap(this.id, x, y, source);
    }
    text(text, source) {
        return this.client.text(this.id, text, source);
    }
    keyEvent(code, options) {
        return this.client.keyEvent(this.id, code, options);
    }
    swipe(x1, y1, x2, y2, options) {
        return this.client.swipe(this.id, x1, y1, x2, y2, options);
    }
    dragAndDrop(x1, y1, x2, y2, options) {
        return this.client.dragAndDrop(this.id, x1, y1, x2, y2, options);
    }
    press(source) {
        return this.client.press(this.id, source);
    }
    roll(x, y, source) {
        return this.client.roll(this.id, x, y, source);
    }
    custom(CustomCommand, ...args) {
        return this.client.customTransport(CustomCommand, this.id, ...args);
    }
    openMonkey() {
        return this.client.openMonkey(this.id);
    }
    killApp(pkg) {
        return this.client.killApp(this.id, pkg);
    }
    /**
     * If cmd contains arguments, they need to be passed as and string[], not string. @see https://github.com/Maaaartin/adb-ts/issues/13
     */
    exec(cmd) {
        return this.client.execDevice(this.id, cmd);
    }
    execShell(cmd) {
        return this.client.execDeviceShell(this.id, cmd);
    }
    batteryStatus() {
        return this.client.batteryStatus(this.id);
    }
    rm(path, options) {
        return this.client.rm(this.id, path, options);
    }
    mkdir(path, options) {
        return this.client.mkdir(this.id, path, options);
    }
    touch(path, options) {
        return this.client.touch(this.id, path, options);
    }
    mv(srcPath, destPath, options) {
        return this.client.mv(this.id, srcPath, destPath, options);
    }
    cp(srcPath, destPath, options) {
        return this.client.cp(this.id, srcPath, destPath, options);
    }
    fileStat(path) {
        return this.client.fileStat(this.id, path);
    }
}
exports.Device = Device;
