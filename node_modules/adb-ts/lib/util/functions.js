"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.escapeCompat = exports.escape = exports.findMatches = exports.parsePrimitiveParam = exports.stringToType = exports.encodeData = exports.encodeLength = exports.decodeLength = void 0;
const decodeLength = (length) => {
    return parseInt(length, 16);
};
exports.decodeLength = decodeLength;
const encodeLength = (length) => {
    return ('0000' + length.toString(16)).slice(-4).toUpperCase();
};
exports.encodeLength = encodeLength;
const encodeData = (data) => {
    return Buffer.concat([
        Buffer.from((0, exports.encodeLength)(data.length)),
        Buffer.from(data)
    ]);
};
exports.encodeData = encodeData;
const stringToType = (value) => {
    try {
        const parsed = JSON.parse(value);
        if (typeof parsed === 'string' ||
            (typeof parsed === 'object' && parsed !== null)) {
            return value;
        }
        return parsed;
    }
    catch {
        return value || undefined;
    }
};
exports.stringToType = stringToType;
const parsePrimitiveParam = (def, param) => {
    if (typeof param === 'undefined') {
        return def;
    }
    return param;
};
exports.parsePrimitiveParam = parsePrimitiveParam;
function findMatches(value, regExp, parseTo) {
    const exec = (mapper) => {
        const execInternal = (acc) => {
            const match = regExp.exec(value);
            return match ? execInternal(mapper(match.slice(1), acc)) : acc;
        };
        return execInternal;
    };
    switch (parseTo) {
        case 'list':
            return exec(([match], acc) => acc.concat(match))([]);
        case 'map':
            return exec(([k, v], acc) => acc.set(k, (0, exports.stringToType)(v)))(new Map());
        default:
            return exec((match, acc) => [...acc, match])([]);
    }
}
exports.findMatches = findMatches;
function escape(arg) {
    switch (typeof arg) {
        case 'undefined':
            return "''";
        case 'string':
            return "'" + arg.replace(/'/g, "'\"'\"'") + "'";
        default:
            return `${arg}`;
    }
}
exports.escape = escape;
function escapeCompat(arg) {
    switch (typeof arg) {
        case 'string':
            return '"' + arg.replace(/([$`\\!"])/g, '\\$1') + '"';
        default:
            return escape(arg);
    }
}
exports.escapeCompat = escapeCompat;
