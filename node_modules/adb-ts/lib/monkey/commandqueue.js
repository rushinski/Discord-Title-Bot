"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandQueue = void 0;
const api_1 = __importDefault(require("./api"));
const command_1 = require("./command");
class CommandQueue extends api_1.default {
    constructor(client) {
        super();
        this.commands = [];
        this.replies = [];
        this.errors = [];
        this.sent = false;
        this.client = client;
    }
    get queue() {
        return this.client.queue;
    }
    set queue(queue) {
        this.client.queue = queue;
    }
    collector(err, value, command) {
        if (err) {
            this.errors.push(`${command}: ${err.message}`);
        }
        this.replies.push(value || null);
        return this.maybeFinish();
    }
    maybeFinish() {
        if (this.client.queue.length === 0) {
            if (this.errors.length) {
                setImmediate(() => {
                    this.callback?.(new Error(this.errors.join(', ')), []);
                });
            }
            else {
                setImmediate(() => {
                    this.callback?.(null, this.replies);
                });
            }
        }
    }
    forbidReuse() {
        if (this.sent) {
            throw new Error('Reuse not supported');
        }
    }
    sendInternal(cmdConstruct) {
        this.forbidReuse();
        this.commands.push(cmdConstruct);
        return this;
    }
    sendAndParse(command, _cb, parser) {
        return this.sendInternal(new command_1.ParsableCommand(command, this.collector.bind(this), parser));
    }
    send(command) {
        return this.sendInternal(new command_1.Command(command, this.collector.bind(this)));
    }
    getCommands() {
        return this.commands
            .map((cmd) => cmd.command)
            .join('\n')
            .concat('\n');
    }
    pushCommands() {
        this.queue = [...this.queue, ...this.commands];
    }
    execute(cb) {
        this.forbidReuse();
        this.sent = true;
        this.callback = cb;
        if (this.commands.length === 0) {
            throw new Error('No commands to execute');
        }
        const commands = this.getCommands();
        this.pushCommands();
        this.commands = [];
        this.client.stream.write(commands);
    }
}
exports.CommandQueue = CommandQueue;
