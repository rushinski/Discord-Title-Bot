"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const reply_1 = require("./reply");
const events_1 = require("events");
class Parser extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        this.column = 0;
        this.buffer = Buffer.alloc(0);
    }
    parse(chunk) {
        this.buffer = Buffer.concat([chunk]);
        while (this.column < this.buffer.length) {
            if (this.buffer[this.column] === 0x0a) {
                this.parseLine(this.buffer.subarray(0, this.column));
                this.buffer = this.buffer.subarray(this.column + 1);
                this.column = 0;
            }
            this.column += 1;
        }
    }
    parseLine(line) {
        switch (line[0]) {
            case 0x4f:
                if (line.length === 2) {
                    this.emit('reply', new reply_1.OkReply(null));
                    return;
                }
                this.emit('reply', new reply_1.OkReply(line.toString('ascii', 3)));
                return;
            case 0x45:
                if (line.length === 5) {
                    this.emit('reply', new reply_1.ErrReply(null));
                    return;
                }
                this.emit('reply', new reply_1.ErrReply(line.toString('ascii', 6)));
                return;
            default:
                this.emit('error', new SyntaxError("Unparsable line '" + line + "'"));
        }
    }
    on(event, listener) {
        return super.on(event, listener);
    }
}
exports.Parser = Parser;
