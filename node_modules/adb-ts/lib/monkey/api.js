"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
// reference https://android.googlesource.com/platform/development/+/master/cmds/monkey/src/com/android/commands/monkey/MonkeySourceNetworkVars.java
class Api extends events_1.EventEmitter {
    getAndParse(command, parser, cb) {
        return this.sendAndParse('getvar ' + command, cb, (data) => {
            if (!data) {
                return null;
            }
            if (parser.type === 'number') {
                return parseFloat(data);
            }
            return data.split(parser.splitter);
        });
    }
    keyDown(keyCode, cb) {
        return this.send('key down ' + keyCode, cb);
    }
    keyUp(keyCode, cb) {
        return this.send('key up ' + keyCode, cb);
    }
    touchDown(x, y, cb) {
        return this.send('touch down ' + x + ' ' + y, cb);
    }
    touchUp(x, y, cb) {
        return this.send('touch up ' + x + ' ' + y, cb);
    }
    touchMove(x, y, cb) {
        return this.send('touch move ' + x + ' ' + y, cb);
    }
    trackball(dx, dy, cb) {
        return this.send('trackball ' + dx + ' ' + dy, cb);
    }
    flipOpen(cb) {
        return this.send('flip open', cb);
    }
    flipClose(cb) {
        return this.send('flip close', cb);
    }
    wake(cb) {
        return this.send('wake', cb);
    }
    tap(x, y, cb) {
        return this.send('tap ' + x + ' ' + y, cb);
    }
    press(keyCode, cb) {
        return this.send('press ' + keyCode, cb);
    }
    type(str, cb) {
        str = str.replace(/"/g, '\\"');
        if (str.indexOf(' ') === -1) {
            return this.send('type ' + str, cb);
        }
        else {
            return this.send('type "' + str + '"', cb);
        }
    }
    list(cb) {
        return this.sendAndParse('listvar', cb, (vars) => {
            return vars?.trim().split(/\s+/g) || null;
        });
    }
    get(name, cb) {
        return this.send('getvar ' + name, cb);
    }
    sleep(ms, cb) {
        return this.send('sleep ' + ms, cb);
    }
    quit(cb) {
        return this.send('quit', cb);
    }
    done(cb) {
        return this.send('done', cb);
    }
    // am.  note that the current activity information isn't valid
    // until the first activity gets launched after the monkey has
    // been started.
    getAmCurrentAction(cb) {
        return this.get('am.current.action', cb);
    }
    getAmCurrentCategories(cb) {
        return this.getAndParse('am.current.categories', { type: 'stringArray', splitter: /\s+/g }, cb);
    }
    getAmCurrentCompClass(cb) {
        return this.get('am.current.comp.class', cb);
    }
    getAmCurrentCompPackage(cb) {
        return this.get('am.current.comp.package', cb);
    }
    getAmCurrentData(cb) {
        return this.get('am.current.data', cb);
    }
    getAmCurrentPackage(cb) {
        return this.get('am.current.package', cb);
    }
    getBuildBoard(cb) {
        return this.get('build.board', cb);
    }
    getBuildBrand(cb) {
        return this.get('build.brand', cb);
    }
    getBuildCpuAbi(cb) {
        return this.get('build.cpu_abi', cb);
    }
    getBuildDevice(cb) {
        return this.get('build.device', cb);
    }
    getBuildDisplay(cb) {
        return this.get('build.display', cb);
    }
    getBuildFingerprint(cb) {
        return this.get('build.fingerprint', cb);
    }
    getBuildHost(cb) {
        return this.get('build.host', cb);
    }
    getBuildId(cb) {
        return this.get('build.id', cb);
    }
    getBuildManufacturer(cb) {
        return this.get('build.manufacturer', cb);
    }
    getBuildModel(cb) {
        return this.get('build.model', cb);
    }
    getBuildProduct(cb) {
        return this.get('build.product', cb);
    }
    getBuildTags(cb) {
        return this.getAndParse('build.tags', { type: 'stringArray', splitter: ',' }, cb);
    }
    getBuildType(cb) {
        return this.get('build.type', cb);
    }
    getBuildUser(cb) {
        return this.get('build.user', cb);
    }
    getBuildVersionCodename(cb) {
        return this.get('build.version.codename', cb);
    }
    getBuildVersionIncremental(cb) {
        return this.get('build.version.incremental', cb);
    }
    getBuildVersionRelease(cb) {
        return this.get('build.version.release', cb);
    }
    getBuildVersionSdk(cb) {
        return this.getAndParse('build.version.sdk', { type: 'number' }, cb);
    }
    getClockMillis(cb) {
        return this.getAndParse('clock.millis', { type: 'number' }, cb);
    }
    getClockRealtime(cb) {
        return this.getAndParse('clock.realtime', { type: 'number' }, cb);
    }
    getClockUptime(cb) {
        return this.getAndParse('clock.uptime', { type: 'number' }, cb);
    }
    getDisplayDensity(cb) {
        return this.getAndParse('display.density', { type: 'number' }, cb);
    }
    getDisplayHeight(cb) {
        return this.getAndParse('display.height', { type: 'number' }, cb);
    }
    getDisplayWidth(cb) {
        return this.getAndParse('display.width', { type: 'number' }, cb);
    }
}
exports.default = Api;
